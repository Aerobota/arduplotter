var data = <%- JSON.stringify(processed) %>;

<%
	var backgroundColours = {
		'ALT_HOLD': '#e7b1b2',
    'STABILIZE': '#ecca9e',
    'LOITER': '#aad7a7',
    'RTL' : '#fcc',
	};

	var markings = [];
  for (var k in processed.mode.modes) {
    markings.push({xaxis: { from: processed.mode.modes[k].start, to: processed.mode.modes[k].end },color: backgroundColours[processed.mode.modes[k].name]});
  }
%>
var app = {};
var colours = ['#1E9CE5', '#B94A48', '#2D6987', '#356635'];

$(function() {
	$('.toggle-size').click(function() {
		var cont = $(this).parents('.panel').parent('div');
		if (cont.hasClass('col-md-6')) {
			cont.removeClass('col-md-6').addClass('col-md-12');
			$(this).children('span').removeClass('glyphicon-resize-full').addClass('glyphicon-resize-small');
		} else {
			cont.removeClass('col-md-12').addClass('col-md-6');
			$(this).children('span').removeClass('glyphicon-resize-small').addClass('glyphicon-resize-full');
		}
	});

<% if (processed.current.exists) { %>
	/****************************************
	 *                Power                 *
	 ****************************************/
	$.plot('#current-graph',[
	{
		label: 'Current', 
		data: <%= JSON.stringify(processed.current.curr) %>,
		color: colours[0],
	}], {
    grid: {
      backgroundColor: { colors: ["#fff", "#eee"] },
      markings: <%- JSON.stringify(markings) %>
    },
    series: { shadowSize: 0 },
    xaxis: { ticks:[] },
  });

  $.plot('#totcurrent-graph',[
	{
		label: 'Total Current', 
		data: <%= JSON.stringify(processed.current.currTot) %>,
		color: colours[0],
	}], {
    grid: {
      backgroundColor: { colors: ["#fff", "#eee"] },
      markings: <%- JSON.stringify(markings) %>
    },
    series: { shadowSize: 0 },
    xaxis: { ticks:[] },
  });

	$.plot('#voltage-graph',[
	{
		label: 'Voltage', 
		data: <%= JSON.stringify(processed.current.volt) %>,
		color: colours[0],
	}, {
		label: 'Board Voltage', 
		data: <%= JSON.stringify(processed.current.vcc) %>,
		color: colours[1]
	}], {
    grid: {
      backgroundColor: { colors: ["#fff", "#eee"] },
      markings: <%- JSON.stringify(markings) %>
    },
    series: {
    	lines: { show: true },
      shadowSize: 0 
    },
    xaxis: { ticks:[] },
  });

<% } /*current*/ %>

<% if (processed.ctun.exists) { %>
	/****************************************
	 *               Altitude               *
	 ****************************************/
	ploty = $.plot('#altitude-graph',[<% if (processed.gps.exists) { %>
		{
			label: 'GPS', 
			data: <%- JSON.stringify(processed.gps.alt.values) %>,
			color: colours[0],
		}, {
			label: 'GPS Rel', 
			data: <%- JSON.stringify(processed.gps.relalt.values) %>,
			color: colours[2],
		}, <% } %>{
			label: 'Sonar', 
			data: <%- JSON.stringify(processed.ctun.sonAlt) %>,
			color: colours[3],
		}, {
			label: 'Barometer', 
			data: <%- JSON.stringify(processed.ctun.barAlt) %>,
			color: colours[1],
		}
		], {
	    grid: {
	    	hoverable: true,
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
			crosshair: { mode: "x" },
	    xaxis: { ticks:[] },
	  }
  );

	var readings = <%- JSON.stringify(processed.gps.readings) %>;

  $("#altitude-graph").bind("plothover", function (event, posi, item) {
  	var x = parseInt(posi.x),
  	indexOf = readings.indexOf(x);
  	if (indexOf == -1) {
  		//Not found
  		var found = 0;
  		for (var k in readings) {
  			if (readings[k] > x) {
  				found = k;
  				//found the one higher
  				break;
  			}
  		}
  		indexOf = k;
  	} 

		var pos = app.flightPath.getPath().getAt(indexOf);
		if (typeof pos != "undefined") {
			app.marker.setPosition(new google.maps.LatLng(pos.lat(), pos.lng()));
		} else {
			console.log(pos, indexOf);
		}

  });

	$.plot('#throttle-graph',[
	{
		label: 'In', 
		data: <%- JSON.stringify(processed.ctun.thrIn) %>,
		color: colours[0],
	}, {
		label: 'Out', 
		data: <%- JSON.stringify(processed.ctun.thrOut) %>,
		color: colours[1],
	}
	], {
    grid: {
      backgroundColor: { colors: ["#fff", "#eee"] },
      markings: <%- JSON.stringify(markings) %>
    },
    series: { shadowSize: 0 },
    xaxis: { ticks:[] },
  });

  $.plot('#crate-graph',[
	{
		label: 'Climb Rate', 
		data: <%- JSON.stringify(processed.ctun.cRate) %>,
		color: colours[0],
	}, {
		label: 'Desired Climb Rate', 
		data: <%- JSON.stringify(processed.ctun.dcRate) %>,
		color: colours[1],
	}
	], {
    grid: {
      backgroundColor: { colors: ["#fff", "#eee"] },
      markings: <%- JSON.stringify(markings) %>
    },
    series: { shadowSize: 0 },
    xaxis: { ticks:[] },
  });

<% } /*ctun*/ %>

<% if (processed.att.exists) { %>
	/****************************************
	 *               Attitude               *
	 ****************************************/
	$.plot('#attitude-roll-graph',[
			{
				label: 'Roll In', 
				data: <%- JSON.stringify(processed.att.rollIn) %>,
				color: colours[0],
			}, {
				label: 'Roll', 
				data: <%- JSON.stringify(processed.att.roll) %>,
				color: colours[1],
			}
		], {
	    grid: {
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
	    xaxis: { ticks:[] },
	  }
  );

	$.plot('#attitude-pitch-graph',[
			{
				label: 'Pitch In', 
				data: <%- JSON.stringify(processed.att.pitchIn) %>,
				color: colours[0],
			}, {
				label: 'Pitch', 
				data: <%- JSON.stringify(processed.att.pitch) %>,
				color: colours[1],
			}
		], {
	    grid: {
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
	    xaxis: { ticks:[] },
	  }
  );

	$.plot('#attitude-yaw-graph',[
			{
				label: 'Yaw In', 
				data: <%- JSON.stringify(processed.att.yawIn) %>,
				color: colours[0],
			}, {
				label: 'Yaw', 
				data: <%- JSON.stringify(processed.att.yaw) %>,
				color: colours[1],
			}, {
				label: 'Nav Yaw', 
				data: <%- JSON.stringify(processed.att.navYaw) %>,
				color: colours[2],
			}
		], {
	    grid: {
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
	    xaxis: { ticks:[] },
	  }
  );

<% } /* attitude */%>

<% if (processed.gps.exists) { %>
	/****************************************
	 *                 GPS                  *
	 ****************************************/
	$.plot('#gps-status-graph',[
			{
				label: 'Status', 
				data: <%- JSON.stringify(processed.gps.status.values) %>,
				color: colours[0],
			},
			{
				label: 'HDop', 
				data: <%- JSON.stringify(processed.gps.hdop.values) %>,
				color: colours[1],
			}
		], {
	    grid: {
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
	    xaxis: { ticks:[] },
	  }
  );

	$.plot('#gps-satellites-graph',[
			{
				label: 'Satellites', 
				data: <%- JSON.stringify(processed.gps.nsats.values) %>,
				color: colours[0],
			}
		], {
	    grid: {
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
	    xaxis: { ticks:[] },
	  }
  );

	$.plot('#gps-speed-graph',[
			{
				label: 'Speed', 
				data: <%- JSON.stringify(processed.gps.spd.values) %>,
				color: colours[0],
			},
			{
				label: 'Avg Speed', 
				data: <%- JSON.stringify(processed.gps.lAvgSpd) %>,
				color: colours[1],
			}
		], {
	    grid: {
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
	    xaxis: { ticks:[] },
	  }
  );

	function initialize() {
	  var mapOptions = {
	    zoom: 18,
	    center: new google.maps.LatLng(<%-processed.gps.googleMaps[0][0]%>, <%-processed.gps.googleMaps[0][1]%>),
	    mapTypeId: google.maps.MapTypeId.SATELLITE
	  };

	  app.map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

	  app.flightPath = new google.maps.Polyline({
	    path: [<% for (var k in processed.gps.googleMaps) { %>
	    	new google.maps.LatLng(<%-processed.gps.googleMaps[k][0]%>, <%-processed.gps.googleMaps[k][1]%>),<% } %>
	    ],
	    geodesic: true,
	    strokeColor: '#FF0000',
	    strokeOpacity: 1.0,
	    strokeWeight: 2,
	    map: app.map
	  });

	  var image = {
	  	url: '/images/quad.png',
  		size: new google.maps.Size(32, 32),
    	origin: new google.maps.Point(0,0),
    	anchor: new google.maps.Point(16,16)
	  };

  	app.marker = new google.maps.Marker({
      position: app.map.getCenter(),
      map: app.map,
      icon: image
	  });

	}

	google.maps.event.addDomListener(window, 'load', initialize);


	


<% } /* gps */%>

<% if (processed.imu.exists) { %>
	/****************************************
	 *                 GPS                  *
	 ****************************************/
	$.plot('#vibrations-graph',[
			{
				label: 'AccX', 
				data: <%- JSON.stringify(processed.imu.accX) %>,
				color: colours[0],
			},
			{
				label: 'AccY', 
				data: <%- JSON.stringify(processed.imu.accY) %>,
				color: colours[1],
			},
			{
				label: 'AccZ', 
				data: <%- JSON.stringify(processed.imu.accZ) %>,
				color: colours[2],
			},
			{ color: "#000", lineWidth: 1, yaxis: { from: 3, to: 3 } },
			{ color: "#000", lineWidth: 1, yaxis: { from: -3, to: -3 } }
		], {
	    grid: {
	      backgroundColor: { colors: ["#fff", "#eee"] },
	      markings: <%- JSON.stringify(markings) %>
	    },
	    series: { shadowSize: 0 },
	    xaxis: { ticks:[] },
	    zoom: {
				interactive: true
			},
			pan: {
				interactive: true
			}
	  }
  );
<% } %>

app.play = function(i) {
	var pos = app.flightPath.getPath().getAt(i);
	if (typeof pos !== undefined && pos != null) {
		var latLng = new google.maps.LatLng(pos.lat(), pos.lng());
		app.map.setCenter(latLng);
		app.marker.setPosition(latLng);
	}

	if (i < app.flightPath.getPath().length) {
		app.playTimeout = setTimeout(function() {
			app.play(i+1);
		}, 50);
	}
}

app.stop = function() {
	if (app.playTimeout) {
		clearTimeout(app.playTimeout);
	}
}


});
